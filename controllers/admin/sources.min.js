const Source=require("../../models/source");exports.getAddSource=(req,res,next)=>{res.render("admin/edit-opensource",{pageTitle:"Add Open Source Repository",path:"/admin/add-opensource",editing:!1})},exports.postAddSource=(req,res,next)=>{const title=req.body.title,description=req.body.description,gitHubLink=req.body.gitHubLink,gitHubIcon=req.body.gitHubIcon,gitHubLinkText=req.body.gitHubLinkText,source=new Source(null,title,description,gitHubLink,gitHubIcon,gitHubLinkText);source.save(),res.redirect("/admin/all-opensource")},exports.getEditSource=(req,res,next)=>{const editMode=req.query.edit;if(!editMode)return res.redirect("/");const sourceId=req.params.sourceId;Source.findById(sourceId,source=>{if(!source)return res.redirect("/");res.render("admin/edit-opensource",{pageTitle:"Edit Open Source Repository",path:"/admin/edit-opensource",editing:editMode,source:source})})},exports.postEditSource=(req,res,next)=>{const sourceId=req.body.sourceId,updatedTitle=req.body.title,updatedDescription=req.body.description,updatedGitHubIcon=req.body.gitHubIcon,updatedGitHubLink=req.body.gitHubLink,updatedGitHubLinkText=req.body.gitHubLinkText,updatedSource=new Source(sourceId,updatedTitle,updatedDescription,updatedGitHubIcon,updatedGitHubLink,updatedGitHubLinkText);updatedSource.save(),res.redirect("/admin/all-opensource")},exports.getAllSources=(req,res,next)=>{Source.fetchAll(sources=>{res.render("admin/all-opensource",{sources:sources,pageTitle:"Admin All Open Source Repositories",path:"/admin/all-opensource"})})},exports.postDeleteSource=(req,res,next)=>{const sourceId=req.body.sourceId;Source.deleteById(sourceId),res.redirect("/admin/all-opensource")};