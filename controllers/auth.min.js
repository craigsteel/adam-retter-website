const bcrypt=require("bcryptjs"),User=require("../models/user");exports.getLogin=(req,res,next)=>{res.render("auth/login",{path:"/login",pageTitle:"Login"})},exports.getSignup=(req,res,next)=>{res.render("auth/signup",{path:"/signup",pageTitle:"Signup"})},exports.postLogin=(req,res,next)=>{const email=req.body.email,password=req.body.password;User.findOne({email:email}).then(user=>{if(!user)return res.redirect("/login");bcrypt.compare(password,user.password).then(doMatch=>{if(doMatch)return req.session.isLoggedIn=!0,req.session.user=user,req.session.save(err=>{console.log(err),res.redirect("/")});res.redirect("/login")}).catch(err=>{console.log(err),res.redirect("/login")})}).catch(err=>console.log(err))},exports.postSignup=(req,res,next)=>{const email=req.body.email,password=req.body.password,confirmPassword=req.body.confirmPassword;User.findOne({email:email}).then(userDoc=>userDoc?res.redirect("/signup"):bcrypt.hash(password,12).then(hashedPassword=>{const user=new User({email:email,password:hashedPassword});return user.save()}).then(result=>{res.redirect("/login")})).catch(err=>{console.log(err)})},exports.postLogout=(req,res,next)=>{req.session.destroy(err=>{console.log(err),res.redirect("/")})};